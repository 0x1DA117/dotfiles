# vim: set ft=zsh

#
# Completion
#

# Add completion path for installed ports
fpath=(/opt/local/share/zsh/site-functions $fpath)

# Custom fpath for completion sources
fpath=(~/.zsh_completions $fpath)

# Case-insensitive matching
zstyle ':completion:*' matcher-list '' \
       'm:{a-z\-}={A-Z\_}' \
       'r:[^[:alpha:]]||[[:alpha:]]=** r:|=* m:{a-z\-}={A-Z\_}' \
       'r:|?=** m:{a-z\-}={A-Z\_}'

# Select completions with arrow keys
zstyle ':completion:*' menu select

# Group results by category
zstyle ':completion:*' group-name ''

setopt always_to_end
setopt auto_menu
setopt complete_in_word

autoload -Uz compinit
compinit

# FZF
source /opt/local/share/fzf/shell/completion.zsh


#
# Environment Variables
#

export LANG=en_US.UTF-8
export EDITOR=nvim
export WORDCHARS='*?_-.[]~=&;!#$%^(){}<>'
export SSH_AUTH_SOCK=$($(which gpgconf) --list-dirs agent-ssh-socket)

# PATH
export PATH=$HOME/.cargo/bin:$PATH
export PATH=$HOME/.rustup/toolchains/stable-x86_64-apple-darwin/bin:$PATH
export PATH=$HOME/go/bin:$PATH
export PATH=$HOME/.local/bin:$PATH


#
# Plugins
#

# zoxide (https://github.com/ajeetdsouza/zoxide)
eval "$(zoxide init zsh)"

# zsh-autosuggestions
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=244"

# spaceship (Prompt)
SPACESHIP_CHAR_SYMBOL="%% "
SPACESHIP_EXIT_CODE_SHOW=true
SPACESHIP_PROMPT_ORDER=(exit_code dir venv git line_sep char)

{% for item in zsh_plugins %}
source {{ zsh_plugins_dir }}/{{item.repo | basename }}/{{ item.source }}
{% endfor %}


#
# History Options
#

HISTSIZE="10000"
SAVEHIST="10000"
HISTFILE="$HOME/.zsh_history"

setopt hist_fcntl_lock
setopt hist_ignore_dups
setopt hist_ignore_space
setopt share_history
setopt extended_history


#
# Key Bindings
#

# Jump words with option+left / option+right
bindkey '\e[1;3D' backward-word
bindkey '\e[1;3C' forward-word

# Scroll history using up and down arrow keys
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down

# FZF
source /opt/local/share/fzf/shell/key-bindings.zsh


#
# Aliases
#

alias md='mkdir'

if (( $+commands[bat] )); then
    alias cat='bat'
fi

if (( $+commands[eza] )); then
    alias ls='eza'
    alias l='eza -l'
    alias la='eza -al'
    alias tree='eza --tree'
    alias treegi='eza --tree --git-ignore'
fi

if (( $+commands[git] )); then
    alias g='git'
    alias gs='git status'
    alias gc='git commit'
    alias gba='git branch -a'
    alias gpl='git pull'
    alias gpu='git push'
    alias gwt='git worktree'
    alias gui='gitui'
    alias cdr='cd $(git rev-parse --show-toplevel)'
    alias diff='git diff --no-index'
fi

if (( $+commands[podman] )); then
    alias p='podman'
fi

if (( $+commands[kubectl] )); then
    alias k='kubectl'
fi

if (( $+commands[nvim] )); then
    alias v='nvim'
else
    alias v='vim'
fi


#
# Functions
#

# Create structure for Git Worktree repos
gwtclone() {
    if [ -z $1 ]
    then
        echo 'No argument provided'
        exit 1
    fi

    local repo=$1

    if [[ ! $repo = git@* ]]
    then
        echo 'Repository does not seem to be a Git URL'
        exit 1
    fi

    local dirname=$(basename $repo | cut -f 1 -d '.')
    mkdir $dirname
    cd $dirname
    git clone --bare $repo .bare
    echo 'gitdir: ./.bare' > .git
}
